https://github.com/okovtun/PD_011.git
https://www.youtube.com/watch?v=OG8eJ5vgXns&list=PLeqyOOqxeiIPInTeBnDUO6ik4Q7bRp2cR&index=1&t=3839s

Book:
https://drive.google.com/drive/folders/1wxr2q93yKD3AHFgI5YO_IfLa8rX6gtAc?usp=sharing

/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////					  WinAPI				/////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
Изучить свойства диалогового окна и кнопок.

/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////					  UML					/////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

TODO:
1. Залезть в машину - клавиша Enter;	DONE
2. Машина должна заводится и расходовать топливо на холостом ходу;	DONE
3. Машина должна набирать скорость до максимально возможной, и должна тормозить.
   Если педаль газа НЕ зажата, то скорость плавно снижается, в результате силы трения колес о дорогу. DONE
4. Сделать панель более живой и красивой, на Ваше усмотрение.

/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////					  STL					/////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

http://cplusplus.com/reference/stl/

TODO:
1. Написать функцию vector_reverse_print(...), которая будет выводить ветктор в обратном порядке;
2. Добавить значение в вектор по индексу. Индекс и значение вводятся с клавиатуры;
3. Удалить значение из вектора по указанному индексу, введенному с клавиатуры;
http://cplusplus.com/reference/vector/vector/

/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////				DATA CONTAINERS			/////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

TODO:
1. Создать ветку TemplatedTree, и шаблонизировать в ней Дерево;
2. Подумать как можно усколрить производительность Дерева;
3. **Вывести дерево на экран, как дерево;
4. **Сбалансировать бинарное дерево;

DONE:
1. Написать метод sum(), который возвращает сумму элементов дерева;
2. Написать метод avg(), который возвращает среднее арифметическое элементов дерева;
3. Обеспечить вызов методов дерева из main() без необходимости передавать методу корень дерева;

DONE:
1. Оптимизировать процедуры добавления элементов;	DONE
2. Написать метод erase();							DONE
3. Написать конструктор, который создает список заданного размера, и перегрузить оператор [];	DONE
4. List list = { 3, 5, 8, 13, 21 };					DONE
5. for(int i:list)cout << i << tab; cout << endl;	DONE	
	---------------------------------------------------------------------------------
6. В класс List::Iterator добавить operator--() и написать проверочный код для него;
7. В класс List добавить методы:					DONE
	ReverseIterator rbegin();
	ReverseIterator rend();
	а так же класс ReverseIterator;
	которые позволят проходить по списку в обратном направлении - от хвоста до головы.
	Написать проверочный код;
	----------------------------------------------------------------------------------
8. CopyMethods;
9. MoveMethods;
10. operator+ перегрузить с использованием Итератора;
11. Шаблонизировать;
12. Разделить на файлы;

DONE:
1. В классе Itertor перегрузить оператор разыменования;
2. В классе ForwardList написать конструктор, который позволит создавать объекты следующим образом:
	ForwardList list = { 3, 5, 8, 13, 21 };

DONE:
В класс ForwardList добавить:
1. метод erase(), который удаляет элемент по индексу;		DONE
2. Написать деструктор, чтобы он очищал список перед удалением;DONE
3. Добавить CopyMethods;		DONE

DONE:
В класс ForwardList добавить метод void push_back(int Data), который добавляет элемент в конец списка.

DONE:
Создать ветку distributed_academy, и в ней вынести классы в отдельные файлы;

DONE:
В проект Academy добавить класс Graduate (Дипломник).

DONE:
Разделить на файлы класс Fraction, в ветке fraction_separated.

TODO:
Реализовать класс Binary, описывающий двоичное число. 
Обеспечить арифметические операции: +, -, *, /;
и побитовые операции: ! - NOT, | - OR, & - AND, ^ - XOR;
над двоичными числами.

DONE:
1. В классе String реализовать оператор [], и использовать его в операторе +;
2. Оптимизировать оператор + используя стардартные функции C++:
	http://cplusplus.com/reference/cstring/
3. В классе String реализовать MoveMethods:
	http://cplusplus.com/doc/tutorial/classes2/

DONE:
Реализовать класс Fraction, описывающий простую дробь. 
В классе должны быть:
1. все обязательные методы;		DONE
2. методы:
	-to_proper();	//Переводит неправильную дробь в правильную 11/4 => 2(3/4)	DONE
	-to_improper();	//Переводит дробь в неправильную	2(3/4) => 11/4			DONE
	-reduce();		//Сокращает дробь		5/10 => 1/2							DONE
	https://www.webmath.ru/poleznoe/formules_12_7.php
2. арифметические операции над дробями: +, -, *, /;		DONE
3. составные присваивания: +=, -=, *=, /=;				DONE
4. Increment/Decrement (++/--);							DONE
5. операторы сравнения: ==, !=, >, <, >=, <=;			TODO:Перегрузить оставшиеся операторы сравнения
6. написать оператор преобразования в double;			DONE
7. обеспечить возможность инициализации объектов значениями типа double;DONE

DONE:
0. Выучить теорию!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
1. Для класса Point перегрузить опервторы +, -, *, /, которые будут выполнять 
   соответсвующие операции над соответствующими координатами, например
   оператор + будет суммировать координаты по 'x' и по 'y', и возвращать точку с суммированными координатами.


DONE:
Оптимизировать метод и функцию distance до одной строки кода.	DONE
1. В классе Point реализовать МЕТОД ??? distance(???), который возвращает расстояние до УКАЗАННОЙ точки;DONE
2. Реализовать функцию ??? distance(???), которая возвращает расстояние между двумя точками;			DONE